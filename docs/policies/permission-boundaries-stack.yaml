AWSTemplateFormatVersion: '2010-09-09'
Description: 'IAM Permission Boundaries for Lambda CI/CD and Execution'

Parameters:
  Environment:
    Type: String
    Default: 'prod'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment for the permission boundaries'

Resources:
  # CI/CD Permission Boundary
  CICDPermissionBoundary:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'LambdaCICDPermissionsBoundary-${Environment}'
      Description: 'Permission boundary for CI/CD roles deploying Lambda functions'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaManagement
            Effect: Allow
            Action:
              - lambda:CreateFunction
              - lambda:UpdateFunctionCode
              - lambda:UpdateFunctionConfiguration
              - lambda:DeleteFunction
              - lambda:GetFunction
              - lambda:ListFunctions
              - lambda:CreateAlias
              - lambda:UpdateAlias
              - lambda:DeleteAlias
              - lambda:GetAlias
              - lambda:ListAliases
              - lambda:PublishVersion
              - lambda:ListVersionsByFunction
              - lambda:GetFunctionConfiguration
              - lambda:PutFunctionConcurrency
              - lambda:DeleteFunctionConcurrency
              - lambda:GetFunctionConcurrency
            Resource: '*'
            Condition:
              StringEquals:
                'aws:RequestedRegion':
                  - us-east-1
                  - us-west-2
                  - eu-west-1
              ForAllValues:StringEquals:
                'aws:RequestTag/ManagedBy': 'CI/CD'
                'aws:RequestTag/Environment': !Ref Environment
          
          - Sid: AllowCodeDeployForLambda
            Effect: Allow
            Action:
              - codedeploy:CreateApplication
              - codedeploy:CreateDeployment
              - codedeploy:CreateDeploymentConfig
              - codedeploy:CreateDeploymentGroup
              - codedeploy:GetApplication
              - codedeploy:GetDeployment
              - codedeploy:GetDeploymentConfig
              - codedeploy:GetDeploymentGroup
              - codedeploy:ListApplications
              - codedeploy:ListDeployments
              - codedeploy:StopDeployment
            Resource: '*'
          
          - Sid: AllowAPIGatewayManagement
            Effect: Allow
            Action:
              - apigateway:GET
              - apigateway:POST
              - apigateway:PUT
              - apigateway:DELETE
              - apigateway:PATCH
            Resource: '*'
            Condition:
              StringEquals:
                'aws:RequestedRegion':
                  - us-east-1
                  - us-west-2
                  - eu-west-1   
       
          - Sid: AllowCloudFormationManagement
            Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:UpdateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:DescribeStackEvents
              - cloudformation:DescribeStackResources
              - cloudformation:GetTemplate
              - cloudformation:ListStacks
              - cloudformation:ValidateTemplate
            Resource: '*'
            Condition:
              StringLike:
                'cloudformation:StackName':
                  - !Sub '*-${Environment}-*'
          
          - Sid: DenyWildcardActions
            Effect: Deny
            Action: '*:*'
            Resource: '*'
            Condition:
              StringEquals:
                'aws:RequestTag/AllowWildcard': 'false'
          
          - Sid: RequireMandatoryTags
            Effect: Deny
            Action:
              - lambda:CreateFunction
              - apigateway:CreateRestApi
            Resource: '*'
            Condition:
              'Null':
                'aws:RequestTag/Environment': 'true'

  # Lambda Execution Permission Boundary
  LambdaExecutionPermissionBoundary:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub 'LambdaExecutionPermissionsBoundary-${Environment}'
      Description: 'Permission boundary for Lambda execution roles'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaBasicExecution
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: 'arn:aws:logs:*:*:*'
          
          - Sid: AllowXRayTracing
            Effect: Allow
            Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
            Resource: '*'
          
          - Sid: AllowSecretsManagerAccess
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
            Resource: !Sub 'arn:aws:secretsmanager:*:*:secret:lambda/${Environment}/*'
          
          - Sid: AllowParameterStoreAccess
            Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:GetParametersByPath
            Resource: !Sub 'arn:aws:ssm:*:*:parameter/lambda/${Environment}/*'
          
          - Sid: AllowKMSDecryption
            Effect: Allow
            Action:
              - kms:Decrypt
              - kms:DescribeKey
            Resource: '*'
            Condition:
              StringEquals:
                'kms:ViaService':
                  - secretsmanager.*.amazonaws.com
                  - ssm.*.amazonaws.com
                  - lambda.*.amazonaws.com
          
          - Sid: DenyDangerousActions
            Effect: Deny
            Action:
              - iam:*
              - organizations:*
              - account:*
              - billing:*
            Resource: '*'
          
          - Sid: DenyRegionRestriction
            Effect: Deny
            Action: '*'
            Resource: '*'
            Condition:
              StringNotEquals:
                'aws:RequestedRegion':
                  - us-east-1
                  - us-west-2
                  - eu-west-1

  # CI/CD Role with Permission Boundary
  CICDRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'lambda-cicd-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com'
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'token.actions.githubusercontent.com:aud': 'sts.amazonaws.com'
              StringLike:
                'token.actions.githubusercontent.com:sub': 'repo:*:ref:refs/heads/main'
      PermissionsBoundary: !Ref CICDPermissionBoundary
      ManagedPolicyArns:
        - !Ref CICDPermissionBoundary
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: 'CloudFormation'
        - Key: Purpose
          Value: 'Lambda CI/CD'

Outputs:
  CICDPermissionBoundaryArn:
    Description: 'ARN of the CI/CD Permission Boundary'
    Value: !Ref CICDPermissionBoundary
    Export:
      Name: !Sub '${AWS::StackName}-CICDPermissionBoundary'
  
  LambdaExecutionPermissionBoundaryArn:
    Description: 'ARN of the Lambda Execution Permission Boundary'
    Value: !Ref LambdaExecutionPermissionBoundary
    Export:
      Name: !Sub '${AWS::StackName}-LambdaExecutionPermissionBoundary'
  
  CICDRoleArn:
    Description: 'ARN of the CI/CD Role'
    Value: !GetAtt CICDRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CICDRole'