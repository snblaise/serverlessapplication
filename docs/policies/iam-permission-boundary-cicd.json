{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "AllowLambdaManagement",
      "Effect": "Allow",
      "Action": [
        "lambda:CreateFunction",
        "lambda:UpdateFunctionCode",
        "lambda:UpdateFunctionConfiguration",
        "lambda:DeleteFunction",
        "lambda:GetFunction",
        "lambda:ListFunctions",
        "lambda:CreateAlias",
        "lambda:UpdateAlias",
        "lambda:DeleteAlias",
        "lambda:GetAlias",
        "lambda:ListAliases",
        "lambda:PublishVersion",
        "lambda:ListVersionsByFunction",
        "lambda:GetFunctionConfiguration",
        "lambda:PutFunctionConcurrency",
        "lambda:DeleteFunctionConcurrency",
        "lambda:GetFunctionConcurrency",
        "lambda:PutProvisionedConcurrencyConfig",
        "lambda:DeleteProvisionedConcurrencyConfig",
        "lambda:GetProvisionedConcurrencyConfig",
        "lambda:ListProvisionedConcurrencyConfigs",
        "lambda:AddPermission",
        "lambda:RemovePermission",
        "lambda:GetPolicy"
      ],
      "Resource": "*",
      "Condition": {
        "StringEquals": {
          "aws:RequestedRegion": [
            "us-east-1",
            "us-west-2",
            "eu-west-1"
          ]
        },
        "ForAllValues:StringEquals": {
          "aws:RequestTag/ManagedBy": "CI/CD",
          "aws:RequestTag/Environment": [
            "dev",
            "staging",
            "prod"
          ]
        },
        "Bool": {
          "lambda:FunctionUrlAuthType": "false"
        }
      }
    },
    {
      "Sid": "AllowCodeDeployForLambda",
      "Effect": "Allow",
      "Action": [
        "codedeploy:CreateApplication",
        "codedeploy:CreateDeployment",
        "codedeploy:CreateDeploymentConfig",
        "codedeploy:CreateDeploymentGroup",
        "codedeploy:GetApplication",
        "codedeploy:GetDeployment",
        "codedeploy:GetDeploymentConfig",
        "codedeploy:GetDeploymentGroup",
        "codedeploy:ListApplications",
        "codedeploy:ListDeployments",
        "codedeploy:ListDeploymentConfigs",
        "codedeploy:ListDeploymentGroups",
        "codedeploy:StopDeployment"
      ],
      "Resource": "*"
    },

    {
      "Sid": "AllowAPIGatewayManagement",
      "Effect": "Allow",
      "Action": [
        "apigateway:GET",
        "apigateway:POST",
        "apigateway:PUT",
        "apigateway:DELETE",
        "apigateway:PATCH"
      ],
      "Resource": "*",
      "Condition": {
        "StringEquals": {
          "aws:RequestedRegion": [
            "us-east-1",
            "us-west-2",
            "eu-west-1"
          ]
        }
      }
    },
    {
      "Sid": "AllowCloudFormationManagement",
      "Effect": "Allow",
      "Action": [
        "cloudformation:CreateStack",
        "cloudformation:UpdateStack",
        "cloudformation:DeleteStack",
        "cloudformation:DescribeStacks",
        "cloudformation:DescribeStackEvents",
        "cloudformation:DescribeStackResources",
        "cloudformation:GetTemplate",
        "cloudformation:ListStacks",
        "cloudformation:ValidateTemplate"
      ],
      "Resource": "*",
      "Condition": {
        "StringLike": {
          "cloudformation:StackName": [
            "*-dev-*",
            "*-staging-*",
            "*-prod-*"
          ]
        }
      }
    },
    {
      "Sid": "AllowS3ForArtifacts",
      "Effect": "Allow",
      "Action": [
        "s3:GetObject",
        "s3:PutObject",
        "s3:DeleteObject",
        "s3:ListBucket"
      ],
      "Resource": [
        "arn:aws:s3:::*-deployment-artifacts-*",
        "arn:aws:s3:::*-deployment-artifacts-*/*"
      ]
    },
    {
      "Sid": "AllowCloudWatchLogs",
      "Effect": "Allow",
      "Action": [
        "logs:CreateLogGroup",
        "logs:CreateLogStream",
        "logs:PutLogEvents",
        "logs:DescribeLogGroups",
        "logs:DescribeLogStreams",
        "logs:PutRetentionPolicy"
      ],
      "Resource": "arn:aws:logs:*:*:log-group:/aws/lambda/*"
    },
    {
      "Sid": "AllowIAMRoleManagement",
      "Effect": "Allow",
      "Action": [
        "iam:CreateRole",
        "iam:DeleteRole",
        "iam:GetRole",
        "iam:ListRoles",
        "iam:PassRole",
        "iam:AttachRolePolicy",
        "iam:DetachRolePolicy",
        "iam:PutRolePolicy",
        "iam:DeleteRolePolicy",
        "iam:GetRolePolicy",
        "iam:ListRolePolicies",
        "iam:ListAttachedRolePolicies"
      ],
      "Resource": [
        "arn:aws:iam::*:role/lambda-execution-*",
        "arn:aws:iam::*:role/codedeploy-*"
      ],
      "Condition": {
        "StringEquals": {
          "iam:PermissionsBoundary": "arn:aws:iam::*:policy/LambdaExecutionPermissionsBoundary"
        }
      }
    },
    {
      "Sid": "DenyWildcardActions",
      "Effect": "Deny",
      "Action": [
        "*:*"
      ],
      "Resource": "*",
      "Condition": {
        "StringEquals": {
          "aws:RequestTag/AllowWildcard": "false"
        }
      }
    },
    {
      "Sid": "DenyProductionAccessOutsideWorkflow",
      "Effect": "Deny",
      "Action": "*",
      "Resource": "*",
      "Condition": {
        "StringEquals": {
          "aws:RequestTag/Environment": "prod"
        },
        "StringNotEquals": {
          "aws:userid": [
            "AIDACKCEVSQ6C2EXAMPLE:github-actions-prod",
            "AIDACKCEVSQ6C2EXAMPLE:codedeploy-prod"
          ]
        }
      }
    },
    {
      "Sid": "RequireMandatoryTags",
      "Effect": "Deny",
      "Action": [
        "lambda:CreateFunction",
        "apigateway:CreateRestApi",
        "apigateway:CreateStage"
      ],
      "Resource": "*",
      "Condition": {
        "Null": {
          "aws:RequestTag/Environment": "true"
        }
      }
    },
    {
      "Sid": "RequireManagedByTag",
      "Effect": "Deny",
      "Action": [
        "lambda:CreateFunction",
        "apigateway:CreateRestApi"
      ],
      "Resource": "*",
      "Condition": {
        "StringNotEquals": {
          "aws:RequestTag/ManagedBy": "CI/CD"
        }
      }
    },
    {
      "Sid": "DenyLambdaFunctionUrls",
      "Effect": "Deny",
      "Action": [
        "lambda:CreateFunctionUrlConfig",
        "lambda:UpdateFunctionUrlConfig"
      ],
      "Resource": "*"
    },
    {
      "Sid": "DenyUnsignedCodeDeployment",
      "Effect": "Deny",
      "Action": [
        "lambda:UpdateFunctionCode",
        "lambda:CreateFunction"
      ],
      "Resource": "*",
      "Condition": {
        "Null": {
          "lambda:CodeSigningConfigArn": "true"
        }
      }
    },
    {
      "Sid": "RestrictIAMWildcardActions",
      "Effect": "Deny",
      "Action": [
        "iam:*"
      ],
      "Resource": "*",
      "Condition": {
        "StringNotLike": {
          "iam:AWSServiceName": [
            "lambda.amazonaws.com",
            "codedeploy.amazonaws.com",
            "apigateway.amazonaws.com"
          ]
        }
      }
    },
    {
      "Sid": "DenyHighPrivilegeActions",
      "Effect": "Deny",
      "Action": [
        "iam:CreateUser",
        "iam:CreateAccessKey",
        "iam:DeleteUser",
        "iam:CreatePolicy",
        "iam:DeletePolicy",
        "iam:CreatePolicyVersion",
        "iam:DeletePolicyVersion",
        "iam:SetDefaultPolicyVersion",
        "iam:AttachUserPolicy",
        "iam:DetachUserPolicy",
        "iam:PutUserPolicy",
        "iam:DeleteUserPolicy",
        "organizations:*",
        "account:*"
      ],
      "Resource": "*"
    },
    {
      "Sid": "EnforceEncryptionInTransit",
      "Effect": "Deny",
      "Action": "*",
      "Resource": "*",
      "Condition": {
        "Bool": {
          "aws:SecureTransport": "false"
        }
      }
    },
    {
      "Sid": "RestrictResourceDeletion",
      "Effect": "Deny",
      "Action": [
        "lambda:DeleteFunction",
        "apigateway:DELETE"
      ],
      "Resource": "*",
      "Condition": {
        "StringEquals": {
          "aws:RequestTag/Environment": "prod"
        },
        "StringNotEquals": {
          "aws:PrincipalTag/Role": "DeploymentManager"
        }
      }
    }
  ]
}