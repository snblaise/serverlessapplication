{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/sarif-2.1/schema/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "Checkov", "version": "3.2.464", "informationUri": "https://checkov.io", "rules": [{"id": "CKV_AWS_7", "name": "Ensure rotation for customer created CMKs is enabled", "shortDescription": {"text": "Ensure rotation for customer created CMKs is enabled"}, "fullDescription": {"text": "Ensure rotation for customer created CMKs is enabled"}, "help": {"text": "Ensure rotation for customer created CMKs is enabled\nResource: aws_kms_key.pipeline_key"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AWS_117", "name": "Ensure that AWS Lambda function is configured inside a VPC", "shortDescription": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "fullDescription": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "help": {"text": "Ensure that AWS Lambda function is configured inside a VPC\nResource: module.lambda_function.aws_lambda_function.main"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AWS_173", "name": "Check encryption settings for Lambda environmental variable", "shortDescription": {"text": "Check encryption settings for Lambda environmental variable"}, "fullDescription": {"text": "Check encryption settings for Lambda environmental variable"}, "help": {"text": "Check encryption settings for Lambda environmental variable\nResource: module.lambda_function.aws_lambda_function.main"}, "defaultConfiguration": {"level": "error"}}, {"id": "CKV_AWS_115", "name": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit", "shortDescription": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "fullDescription": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "help": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit\nResource: module.lambda_function.aws_lambda_function.main"}, "defaultConfiguration": {"level": "error"}}], "organization": "bridgecrew"}}, "results": [{"ruleId": "CKV_AWS_7", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure rotation for customer created CMKs is enabled"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infrastructure/codepipeline.tf"}, "region": {"startLine": 354, "endLine": 393, "snippet": {"text": "resource \"aws_kms_key\" \"pipeline_key\" {\n  description             = \"KMS key for Lambda pipeline ${var.environment}\"\n  deletion_window_in_days = 7\n\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Sid    = \"Enable IAM User Permissions\"\n        Effect = \"Allow\"\n        Principal = {\n          AWS = \"arn:aws:iam::${data.aws_caller_identity.current.account_id}:root\"\n        }\n        Action   = \"kms:*\"\n        Resource = \"*\"\n      },\n      {\n        Sid    = \"Allow CodePipeline to use the key\"\n        Effect = \"Allow\"\n        Principal = {\n          Service = [\n            \"codepipeline.amazonaws.com\",\n            \"codebuild.amazonaws.com\"\n          ]\n        }\n        Action = [\n          \"kms:Decrypt\",\n          \"kms:GenerateDataKey\"\n        ]\n        Resource = \"*\"\n      }\n    ]\n  })\n\n  tags = {\n    Environment = var.environment\n    Project     = \"lambda-production-ready\"\n    ManagedBy   = \"terraform\"\n  }\n}\n"}}}}]}, {"ruleId": "CKV_AWS_117", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infrastructure/modules/lambda/main.tf"}, "region": {"startLine": 1, "endLine": 29, "snippet": {"text": "resource \"aws_lambda_function\" \"main\" {\n  function_name = var.function_name\n  role         = aws_iam_role.lambda_execution.arn\n  handler      = \"index.handler\"\n  runtime      = \"nodejs18.x\"\n  timeout      = var.timeout\n  memory_size  = var.memory_size\n  \n  filename         = var.deployment_package\n  source_code_hash = filebase64sha256(var.deployment_package)\n  \n  code_signing_config_arn = var.code_signing_config_arn != \"\" ? var.code_signing_config_arn : null\n  \n  tracing_config {\n    mode = var.enable_xray_tracing ? \"Active\" : \"PassThrough\"\n  }\n  \n  environment {\n    variables = var.environment_variables\n  }\n  \n  dead_letter_config {\n    target_arn = aws_sqs_queue.dlq.arn\n  }\n  \n  # reserved_concurrency = var.reserved_concurrency\n  \n  tags = var.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_173", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Check encryption settings for Lambda environmental variable"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infrastructure/modules/lambda/main.tf"}, "region": {"startLine": 1, "endLine": 29, "snippet": {"text": "resource \"aws_lambda_function\" \"main\" {\n  function_name = var.function_name\n  role         = aws_iam_role.lambda_execution.arn\n  handler      = \"index.handler\"\n  runtime      = \"nodejs18.x\"\n  timeout      = var.timeout\n  memory_size  = var.memory_size\n  \n  filename         = var.deployment_package\n  source_code_hash = filebase64sha256(var.deployment_package)\n  \n  code_signing_config_arn = var.code_signing_config_arn != \"\" ? var.code_signing_config_arn : null\n  \n  tracing_config {\n    mode = var.enable_xray_tracing ? \"Active\" : \"PassThrough\"\n  }\n  \n  environment {\n    variables = var.environment_variables\n  }\n  \n  dead_letter_config {\n    target_arn = aws_sqs_queue.dlq.arn\n  }\n  \n  # reserved_concurrency = var.reserved_concurrency\n  \n  tags = var.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_115", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "infrastructure/modules/lambda/main.tf"}, "region": {"startLine": 1, "endLine": 29, "snippet": {"text": "resource \"aws_lambda_function\" \"main\" {\n  function_name = var.function_name\n  role         = aws_iam_role.lambda_execution.arn\n  handler      = \"index.handler\"\n  runtime      = \"nodejs18.x\"\n  timeout      = var.timeout\n  memory_size  = var.memory_size\n  \n  filename         = var.deployment_package\n  source_code_hash = filebase64sha256(var.deployment_package)\n  \n  code_signing_config_arn = var.code_signing_config_arn != \"\" ? var.code_signing_config_arn : null\n  \n  tracing_config {\n    mode = var.enable_xray_tracing ? \"Active\" : \"PassThrough\"\n  }\n  \n  environment {\n    variables = var.environment_variables\n  }\n  \n  dead_letter_config {\n    target_arn = aws_sqs_queue.dlq.arn\n  }\n  \n  # reserved_concurrency = var.reserved_concurrency\n  \n  tags = var.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_117", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured inside a VPC"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "templates/lambda-deployment-template.yaml"}, "region": {"startLine": 110, "endLine": 140, "snippet": {"text": "  LambdaFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      FunctionName: !Sub '${FunctionName}-${Environment}'\n      Runtime: !Ref Runtime\n      Handler: !Ref Handler\n      Role: !GetAtt LambdaExecutionRole.Arn\n      Code:\n        S3Bucket: !Ref BucketName\n        S3Key: !Ref PackageKey\n      Timeout: !Ref Timeout\n      MemorySize: !Ref MemorySize\n      Environment:\n        Variables:\n          ENVIRONMENT: !Ref Environment\n          LOG_LEVEL: !If [IsProduction, 'WARN', 'INFO']\n          POWERTOOLS_SERVICE_NAME: lambda-production-readiness\n          POWERTOOLS_METRICS_NAMESPACE: LambdaProductionReadiness\n      TracingConfig:\n        Mode: Active\n      DeadLetterConfig:\n        TargetArn: !GetAtt DeadLetterQueue.Arn\n      ReservedConcurrencyLimit: !If [IsProduction, 100, 10]\n      Tags:\n        - Key: Environment\n          Value: !Ref Environment\n        - Key: Project\n          Value: lambda-production-ready\n        - Key: ManagedBy\n          Value: cloudformation\n    DependsOn: LambdaLogGroup\n"}}}}]}, {"ruleId": "CKV_AWS_173", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Check encryption settings for Lambda environment variable"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "templates/lambda-deployment-template.yaml"}, "region": {"startLine": 110, "endLine": 140, "snippet": {"text": "  LambdaFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      FunctionName: !Sub '${FunctionName}-${Environment}'\n      Runtime: !Ref Runtime\n      Handler: !Ref Handler\n      Role: !GetAtt LambdaExecutionRole.Arn\n      Code:\n        S3Bucket: !Ref BucketName\n        S3Key: !Ref PackageKey\n      Timeout: !Ref Timeout\n      MemorySize: !Ref MemorySize\n      Environment:\n        Variables:\n          ENVIRONMENT: !Ref Environment\n          LOG_LEVEL: !If [IsProduction, 'WARN', 'INFO']\n          POWERTOOLS_SERVICE_NAME: lambda-production-readiness\n          POWERTOOLS_METRICS_NAMESPACE: LambdaProductionReadiness\n      TracingConfig:\n        Mode: Active\n      DeadLetterConfig:\n        TargetArn: !GetAtt DeadLetterQueue.Arn\n      ReservedConcurrencyLimit: !If [IsProduction, 100, 10]\n      Tags:\n        - Key: Environment\n          Value: !Ref Environment\n        - Key: Project\n          Value: lambda-production-ready\n        - Key: ManagedBy\n          Value: cloudformation\n    DependsOn: LambdaLogGroup\n"}}}}]}, {"ruleId": "CKV_AWS_115", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure that AWS Lambda function is configured for function-level concurrent execution limit"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "templates/lambda-deployment-template.yaml"}, "region": {"startLine": 110, "endLine": 140, "snippet": {"text": "  LambdaFunction:\n    Type: AWS::Lambda::Function\n    Properties:\n      FunctionName: !Sub '${FunctionName}-${Environment}'\n      Runtime: !Ref Runtime\n      Handler: !Ref Handler\n      Role: !GetAtt LambdaExecutionRole.Arn\n      Code:\n        S3Bucket: !Ref BucketName\n        S3Key: !Ref PackageKey\n      Timeout: !Ref Timeout\n      MemorySize: !Ref MemorySize\n      Environment:\n        Variables:\n          ENVIRONMENT: !Ref Environment\n          LOG_LEVEL: !If [IsProduction, 'WARN', 'INFO']\n          POWERTOOLS_SERVICE_NAME: lambda-production-readiness\n          POWERTOOLS_METRICS_NAMESPACE: LambdaProductionReadiness\n      TracingConfig:\n        Mode: Active\n      DeadLetterConfig:\n        TargetArn: !GetAtt DeadLetterQueue.Arn\n      ReservedConcurrencyLimit: !If [IsProduction, 100, 10]\n      Tags:\n        - Key: Environment\n          Value: !Ref Environment\n        - Key: Project\n          Value: lambda-production-ready\n        - Key: ManagedBy\n          Value: cloudformation\n    DependsOn: LambdaLogGroup\n"}}}}]}]}]}