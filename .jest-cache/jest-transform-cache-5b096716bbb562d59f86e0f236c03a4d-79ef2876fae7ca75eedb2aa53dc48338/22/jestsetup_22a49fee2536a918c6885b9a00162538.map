{"version":3,"names":["_getJestObj","mock","config","update","jest","fn","CloudWatch","putMetricData","mockReturnValue","promise","mockResolvedValue","XRay","captureAWS","captureHTTPs","Logger","mockImplementation","info","error","warn","debug","addContext","Metrics","addMetric","publishStoredMetrics","MetricUnits","Count","Seconds","Milliseconds","Tracer","getSegment","addNewSubsegment","addAnnotation","addMetadata","close","require","process","env","NODE_ENV","LOG_LEVEL","AWS_REGION","global","createMockLambdaContext","overrides","awsRequestId","functionName","functionVersion","invokedFunctionArn","memoryLimitInMB","getRemainingTimeInMillis","logGroupName","logStreamName","identity","undefined","clientContext","setTimeout","originalConsole","console","log","VERBOSE_TESTS"],"sources":["jest.setup.js"],"sourcesContent":["// Jest setup file for global test configuration\n\n// Set test environment variables\nprocess.env.NODE_ENV = 'test';\nprocess.env.LOG_LEVEL = 'ERROR'; // Reduce log noise during tests\nprocess.env.AWS_REGION = 'us-east-1';\n\n// Mock AWS SDK globally\njest.mock('aws-sdk', () => ({\n  config: {\n    update: jest.fn()\n  },\n  CloudWatch: jest.fn(() => ({\n    putMetricData: jest.fn().mockReturnValue({\n      promise: jest.fn().mockResolvedValue({})\n    })\n  })),\n  XRay: jest.fn(() => ({\n    captureAWS: jest.fn(),\n    captureHTTPs: jest.fn()\n  }))\n}));\n\n// Mock Lambda Powertools\njest.mock('@aws-lambda-powertools/logger', () => ({\n  Logger: jest.fn().mockImplementation(() => ({\n    info: jest.fn(),\n    error: jest.fn(),\n    warn: jest.fn(),\n    debug: jest.fn(),\n    addContext: jest.fn()\n  }))\n}));\n\njest.mock('@aws-lambda-powertools/metrics', () => ({\n  Metrics: jest.fn().mockImplementation(() => ({\n    addMetric: jest.fn(),\n    publishStoredMetrics: jest.fn()\n  })),\n  MetricUnits: {\n    Count: 'Count',\n    Seconds: 'Seconds',\n    Milliseconds: 'Milliseconds'\n  }\n}));\n\njest.mock('@aws-lambda-powertools/tracer', () => ({\n  Tracer: jest.fn().mockImplementation(() => ({\n    getSegment: jest.fn().mockReturnValue({\n      addNewSubsegment: jest.fn().mockReturnValue({\n        addAnnotation: jest.fn(),\n        addMetadata: jest.fn(),\n        close: jest.fn()\n      })\n    }),\n    captureAWS: jest.fn(),\n    captureHTTPs: jest.fn()\n  }))\n}));\n\n// Global test utilities\nglobal.createMockLambdaContext = (overrides = {}) => ({\n  awsRequestId: 'test-request-id',\n  functionName: 'test-function',\n  functionVersion: '1',\n  invokedFunctionArn: 'arn:aws:lambda:us-east-1:123456789012:function:test-function',\n  memoryLimitInMB: 128,\n  getRemainingTimeInMillis: () => 30000,\n  logGroupName: '/aws/lambda/test-function',\n  logStreamName: '2023/01/01/[$LATEST]test',\n  identity: undefined,\n  clientContext: undefined,\n  ...overrides\n});\n\n// Increase timeout for integration tests\njest.setTimeout(30000);\n\n// Console override for cleaner test output\nconst originalConsole = console;\nglobal.console = {\n  ...originalConsole,\n  // Suppress console.log during tests unless explicitly needed\n  log: process.env.VERBOSE_TESTS ? originalConsole.log : jest.fn(),\n  info: process.env.VERBOSE_TESTS ? originalConsole.info : jest.fn(),\n  warn: originalConsole.warn,\n  error: originalConsole.error\n};"],"mappings":"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","ignoreList":[]}