{"version":3,"names":["cov_1uwqw04hq5","actualCoverage","Logger","s","require","Metrics","MetricUnits","Tracer","logger","serviceName","logLevel","b","process","env","LOG_LEVEL","metrics","namespace","tracer","exports","handler","event","context","f","correlationId","awsRequestId","addContext","segment","getSegment","subsegment","addNewSubsegment","info","JSON","stringify","functionName","functionVersion","memoryLimitInMB","remainingTimeInMS","getRemainingTimeInMillis","addMetric","Count","Error","result","processEvent","statusCode","headers","body","success","data","error","message","stack","addAnnotation","addMetadata","close","publishStoredMetrics","processingSegment","debug","Promise","resolve","setTimeout","action","handleCreate","handleUpdate","handleDelete","name","id","generateId","status","timestamp","Date","toISOString","now","Math","random","toString","substr"],"sources":["index.js"],"sourcesContent":["const { Logger } = require('@aws-lambda-powertools/logger');\nconst { Metrics, MetricUnits } = require('@aws-lambda-powertools/metrics');\nconst { Tracer } = require('@aws-lambda-powertools/tracer');\n\n// Initialize Powertools\nconst logger = new Logger({\n  serviceName: 'lambda-production-readiness',\n  logLevel: process.env.LOG_LEVEL || 'INFO',\n});\n\nconst metrics = new Metrics({\n  namespace: 'LambdaProductionReadiness',\n  serviceName: 'lambda-production-readiness',\n});\n\nconst tracer = new Tracer({\n  serviceName: 'lambda-production-readiness',\n});\n\n/**\n * Main Lambda handler function\n * Demonstrates production-ready patterns with observability\n */\nexports.handler = async (event, context) => {\n  // Add correlation ID for tracing\n  const correlationId = context.awsRequestId;\n  logger.addContext({ correlationId });\n\n  // Start custom segment for business logic\n  const segment = tracer.getSegment();\n  const subsegment = segment.addNewSubsegment('business-logic');\n\n  try {\n    logger.info('Lambda function started', {\n      event: JSON.stringify(event),\n      context: {\n        functionName: context.functionName,\n        functionVersion: context.functionVersion,\n        memoryLimitInMB: context.memoryLimitInMB,\n        remainingTimeInMS: context.getRemainingTimeInMillis(),\n      },\n    });\n\n    // Add custom metrics\n    metrics.addMetric('InvocationCount', MetricUnits.Count, 1);\n\n    // Validate input\n    if (!event || typeof event !== 'object') {\n      throw new Error('Invalid event object');\n    }\n\n    // Business logic simulation\n    const result = await processEvent(event, correlationId);\n\n    // Add success metrics\n    metrics.addMetric('SuccessCount', MetricUnits.Count, 1);\n\n    logger.info('Lambda function completed successfully', {\n      result,\n      correlationId,\n    });\n\n    return {\n      statusCode: 200,\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Correlation-ID': correlationId,\n      },\n      body: JSON.stringify({\n        success: true,\n        data: result,\n        correlationId,\n      }),\n    };\n  } catch (error) {\n    // Add error metrics\n    metrics.addMetric('ErrorCount', MetricUnits.Count, 1);\n\n    logger.error('Lambda function failed', {\n      error: error.message,\n      stack: error.stack,\n      correlationId,\n    });\n\n    // Add error annotation to X-Ray\n    subsegment.addAnnotation('error', true);\n    subsegment.addMetadata('error', {\n      message: error.message,\n      stack: error.stack,\n    });\n\n    return {\n      statusCode: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Correlation-ID': correlationId,\n      },\n      body: JSON.stringify({\n        success: false,\n        error: 'Internal server error',\n        correlationId,\n      }),\n    };\n  } finally {\n    // Close subsegment\n    subsegment.close();\n\n    // Publish metrics\n    metrics.publishStoredMetrics();\n  }\n};\n\n/**\n * Process the incoming event\n * @param {Object} event - Lambda event object\n * @param {string} correlationId - Correlation ID for tracing\n * @returns {Object} Processing result\n */\nasync function processEvent(event, correlationId) {\n  const processingSegment = tracer.getSegment().addNewSubsegment('process-event');\n\n  try {\n    logger.debug('Processing event', { event, correlationId });\n\n    // Simulate processing time\n    await new Promise(resolve => setTimeout(resolve, 100));\n\n    // Extract and validate required fields\n    const { action, data } = event;\n\n    if (!action) {\n      throw new Error('Missing required field: action');\n    }\n\n    // Process based on action type\n    let result;\n    switch (action) {\n      case 'create':\n        result = await handleCreate(data, correlationId);\n        break;\n      case 'update':\n        result = await handleUpdate(data, correlationId);\n        break;\n      case 'delete':\n        result = await handleDelete(data, correlationId);\n        break;\n      default:\n        throw new Error(`Unsupported action: ${action}`);\n    }\n\n    processingSegment.addAnnotation('action', action);\n    processingSegment.addMetadata('result', result);\n\n    return result;\n  } finally {\n    processingSegment.close();\n  }\n}\n\n/**\n * Handle create action\n */\nasync function handleCreate(data, correlationId) {\n  logger.info('Handling create action', { data, correlationId });\n\n  // Validate required fields for create\n  if (!data || !data.name) {\n    throw new Error('Missing required field for create: name');\n  }\n\n  // Simulate database operation\n  await new Promise(resolve => setTimeout(resolve, 50));\n\n  return {\n    id: generateId(),\n    name: data.name,\n    status: 'created',\n    timestamp: new Date().toISOString(),\n  };\n}\n\n/**\n * Handle update action\n */\nasync function handleUpdate(data, correlationId) {\n  logger.info('Handling update action', { data, correlationId });\n\n  // Validate required fields for update\n  if (!data || !data.id) {\n    throw new Error('Missing required field for update: id');\n  }\n\n  // Simulate database operation\n  await new Promise(resolve => setTimeout(resolve, 75));\n\n  return {\n    id: data.id,\n    status: 'updated',\n    timestamp: new Date().toISOString(),\n  };\n}\n\n/**\n * Handle delete action\n */\nasync function handleDelete(data, correlationId) {\n  logger.info('Handling delete action', { data, correlationId });\n\n  // Validate required fields for delete\n  if (!data || !data.id) {\n    throw new Error('Missing required field for delete: id');\n  }\n\n  // Simulate database operation\n  await new Promise(resolve => setTimeout(resolve, 25));\n\n  return {\n    id: data.id,\n    status: 'deleted',\n    timestamp: new Date().toISOString(),\n  };\n}\n\n/**\n * Generate a unique ID\n */\nfunction generateId() {\n  return `id_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}\n"],"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","ignoreList":[]}