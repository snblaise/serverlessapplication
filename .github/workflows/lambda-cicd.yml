name: Lambda CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to deploy to
        required: true
        default: staging
        type: choice
        options: [staging, production]

env:
  NODE_VERSION: '18'
  AWS_REGION: us-east-1

permissions:
  id-token: write
  contents: read
  security-events: write
  pull-requests: write

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env-config.outputs.environment }}
      aws-region: ${{ steps.env-config.outputs.aws-region }}
      role-arn: ${{ steps.env-config.outputs.role-arn }}
    steps:
      - name: Determine Environment
        id: env-config
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="production"
          else
            ENVIRONMENT="staging"
          fi

          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}"
          if [[ -z "$AWS_ACCOUNT_ID" ]]; then
            echo "❌ AWS_ACCOUNT_ID secret is required"
            exit 1
          fi

          if [[ "$ENVIRONMENT" == "production" ]]; then
            ROLE_ARN="arn:aws:iam::${AWS_ACCOUNT_ID}:role/GitHubActions-Lambda-Production"
          else
            ROLE_ARN="arn:aws:iam::${AWS_ACCOUNT_ID}:role/GitHubActions-Lambda-Staging"
          fi

          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
          echo "aws-region=us-east-1" >> $GITHUB_OUTPUT
          echo "role-arn=${ROLE_ARN}" >> $GITHUB_OUTPUT
          
          echo "🔧 Deploying to: ${ENVIRONMENT}"
          echo "🔑 Using role: ${ROLE_ARN}"

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci
      - run: npm run lint
      - run: npm test -- --coverage
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: coverage/

  security-scan:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActions-SecurityScan
          role-session-name: GitHubActions-SecurityScan
          aws-region: ${{ needs.setup.outputs.aws-region }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci
      - uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - uses: github/codeql-action/analyze@v3
      - run: npm audit --audit-level=high --json > npm-audit-results.json || true
      - run: pip3 install checkov
      - run: |
          checkov -d . --config-file docs/policies/ci-cd/.checkov.yaml --output sarif --output-file-path ./checkov-output --quiet || true
          if [ -d "./checkov-output" ]; then
            find ./checkov-output -name "*.sarif" -exec mv {} ./checkov-results.sarif \;
          fi
          if [ ! -f "./checkov-results.sarif" ]; then
            echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Checkov"}},"results":[]}]}' > ./checkov-results.sarif
          fi
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            npm-audit-results.json
            checkov-results.sarif

  build:
    runs-on: ubuntu-latest
    needs: [setup, test, security-scan]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
      - run: npm ci --only=production
      - name: Build Lambda package
        run: |
          chmod +x scripts/build-lambda-package.sh
          ./scripts/build-lambda-package.sh
      - uses: actions/upload-artifact@v4
        with:
          name: lambda-package
          path: lambda-function.zip

  deploy:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.environment == 'staging' || github.ref == 'refs/heads/main'
    environment:
      name: ${{ needs.setup.outputs.environment }}
      url: https://console.aws.amazon.com/lambda/home?region=${{ needs.setup.outputs.aws-region }}
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.setup.outputs.role-arn }}
          role-session-name: GitHubActions-Deploy-${{ needs.setup.outputs.environment }}
          aws-region: ${{ needs.setup.outputs.aws-region }}
      
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"
      
      - uses: actions/download-artifact@v4
        with:
          name: lambda-package
      
      - name: Deploy Infrastructure
        working-directory: infrastructure
        run: |
          # Copy Lambda package
          cp ../lambda-function.zip ./lambda-function.zip
          
          # Initialize and deploy
          terraform init
          terraform workspace select ${{ needs.setup.outputs.environment }} || terraform workspace new ${{ needs.setup.outputs.environment }}
          terraform plan -var="environment=${{ needs.setup.outputs.environment }}" -var="lambda_function_name=lambda_function_${{ needs.setup.outputs.environment }}" -out=tfplan
          terraform apply -auto-approve tfplan
          
          # Save outputs
          terraform output -json > infrastructure-outputs.json
      
      - name: Deploy Lambda Function
        run: |
          # Get infrastructure outputs
          FUNCTION_NAME=$(jq -r '.lambda_function_name.value' infrastructure/infrastructure-outputs.json)
          
          # Deploy using CodeDeploy for canary deployment
          chmod +x scripts/deploy-lambda-canary.sh
          ./scripts/deploy-lambda-canary.sh \
            --function "$FUNCTION_NAME" \
            --environment "${{ needs.setup.outputs.environment }}" \
            --package "lambda-function.zip" \
            --config "CodeDeployDefault.Lambda10PercentEvery5Minutes" \
            --timeout 600 \
            --region "${{ needs.setup.outputs.aws-region }}"
      
      - name: Health Check
        run: |
          FUNCTION_NAME=$(jq -r '.lambda_function_name.value' infrastructure/infrastructure-outputs.json)
          
          # Test function
          aws lambda invoke \
            --function-name "$FUNCTION_NAME" \
            --payload '{"test": true, "source": "cicd-health-check", "environment": "${{ needs.setup.outputs.environment }}"}' \
            --region "${{ needs.setup.outputs.aws-region }}" \
            response.json
          
          echo "✅ Health check passed"
          cat response.json
      
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-artifacts-${{ needs.setup.outputs.environment }}
          path: |
            infrastructure/infrastructure-outputs.json
            deployment-report.json
            response.json