name: Lambda CI/CD Pipeline

'on':
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to deploy to
        required: true
        default: staging
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  AWS_REGION: us-east-1

permissions:
  id-token: write # Required for OIDC
  contents: read # Required to checkout code
  security-events: write # Required for Security Hub integration
  pull-requests: write # Required for PR comments

jobs:
  # Environment configuration and OIDC setup
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env-config.outputs.environment }}
      aws-region: ${{ steps.env-config.outputs.aws-region }}
    steps:
      - name: Determine Environment
        id: env-config
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="production"
          else
            ENVIRONMENT="staging"
          fi

          echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT

          # Set AWS region
          echo "aws-region=us-east-1" >> $GITHUB_OUTPUT

  # Lint and test stage
  lint-and-test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test -- --coverage

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            test-results.xml

  # Security scanning stage
  security-scan:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.setup.outputs.environment == 'production' && format('arn:aws:iam::{0}:role/{1}', secrets.AWS_ACCOUNT_ID_PROD, secrets.AWS_ROLE_NAME_PROD) || format('arn:aws:iam::{0}:role/{1}', secrets.AWS_ACCOUNT_ID_STAGING, secrets.AWS_ROLE_NAME_STAGING) }}
          role-session-name: GitHubActions-SecurityScan
          aws-region: ${{ needs.setup.outputs.aws-region }}
          audience: sts.amazonaws.com

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run SAST with CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run SCA with npm audit
        run: |
          npm audit --audit-level=high --json > npm-audit-results.json || true

      - name: Install Checkov
        run: |
          pip3 install checkov

      - name: Run Checkov IaC scanning
        run: |
          # Run Checkov and create SARIF output
          checkov -d . \
            --config-file docs/policies/ci-cd/.checkov.yaml \
            --output sarif \
            --output-file-path ./checkov-output \
            --quiet || true
          
          # Move the SARIF file to the expected location
          if [ -d "./checkov-output" ]; then
            find ./checkov-output -name "*.sarif" -exec mv {} ./checkov-results.sarif \;
          fi
          
          # Create empty SARIF file if none exists
          if [ ! -f "./checkov-results.sarif" ]; then
            echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Checkov"}},"results":[]}]}' > ./checkov-results.sarif
          fi

      - name: Upload security scan results to Security Hub
        run: |
          # Convert and upload npm audit results to Security Hub
          python3 scripts/upload-security-findings.py \
            --source "npm-audit" \
            --file "npm-audit-results.json" \
            --environment "${{ needs.setup.outputs.environment }}"

          # Upload Checkov results to Security Hub
          python3 scripts/upload-security-findings.py \
            --source "checkov" \
            --file "checkov-results.sarif" \
            --environment "${{ needs.setup.outputs.environment }}"

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            npm-audit-results.json
            checkov-results.sarif

  # Build and package stage
  build-and-package:
    runs-on: ubuntu-latest
    needs:
      - setup
      - lint-and-test
      - security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.setup.outputs.environment == 'production' && format('arn:aws:iam::{0}:role/{1}', secrets.AWS_ACCOUNT_ID_PROD, secrets.AWS_ROLE_NAME_PROD) || format('arn:aws:iam::{0}:role/{1}', secrets.AWS_ACCOUNT_ID_STAGING, secrets.AWS_ROLE_NAME_STAGING) }}
          role-session-name: GitHubActions-Build
          aws-region: ${{ needs.setup.outputs.aws-region }}
          audience: sts.amazonaws.com

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install production dependencies
        run: npm ci --only=production

      - name: Build Lambda package
        run: |
          # Use optimized build script
          chmod +x scripts/build-lambda-package.sh
          ./scripts/build-lambda-package.sh

      - name: Validate package before signing
        run: |
          # Use validation script for pre-signing checks
          chmod +x scripts/validate-lambda-package.sh
          ./scripts/validate-lambda-package.sh -f lambda-function.zip -m basic

      - name: Sign Lambda package with AWS Signer (Optional)
        run: |
          # Check if signing profile exists before attempting to sign
          SIGNING_PROFILE="lambda-${{ needs.setup.outputs.environment }}"
          S3_BUCKET="lambda-artifacts-${{ needs.setup.outputs.environment }}"
          
          echo "Checking if signing profile '$SIGNING_PROFILE' exists..."
          
          # Check if signing profile exists
          if aws signer get-signing-profile --profile-name "$SIGNING_PROFILE" --region "${{ needs.setup.outputs.aws-region }}" >/dev/null 2>&1; then
            echo "Signing profile found. Proceeding with package signing..."
            
            chmod +x scripts/sign-lambda-package.sh
            ./scripts/sign-lambda-package.sh \
              --file lambda-function.zip \
              --environment "${{ needs.setup.outputs.environment }}" \
              --profile "$SIGNING_PROFILE" \
              --bucket "$S3_BUCKET" \
              --region "${{ needs.setup.outputs.aws-region }}"
          else
            echo "Signing profile '$SIGNING_PROFILE' not found. Skipping code signing."
            echo "To enable code signing, create a signing profile in AWS Signer."
            
            # Create empty signing report for consistency
            cat > signing-report.json << EOF
          {
            "signingJobId": null,
            "signingProfile": "$SIGNING_PROFILE",
            "environment": "${{ needs.setup.outputs.environment }}",
            "status": "skipped",
            "reason": "Signing profile not found",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "originalPackage": {
              "file": "lambda-function.zip"
            }
          }
          EOF
          fi

      - name: Validate signed package
        run: |
          # Validate the signed package
          SIGNED_PACKAGE=$(ls lambda-function-signed.zip 2>/dev/null || echo "lambda-function.zip")

          ./scripts/validate-lambda-package.sh -f "$SIGNED_PACKAGE" -m security

          # Additional integrity checks for signed package
          if [[ "$SIGNED_PACKAGE" == *"signed"* ]]; then
            echo "Signed package validation completed"

            # Verify signing report exists
            if [[ ! -f "signing-report.json" ]]; then
              echo "Warning: Signing report not found"
            else
              echo "Signing report generated successfully"
              cat signing-report.json
            fi
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package-${{ needs.setup.outputs.environment }}
          path: |
            lambda-function.zip
            package.json

  # Deployment stage with approval gates
  deploy:
    runs-on: ubuntu-latest
    needs:
      - setup
      - build-and-package
    environment:
      name: ${{ needs.setup.outputs.environment }}
      url: https://console.aws.amazon.com/lambda/home?region=${{ needs.setup.outputs.aws-region }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ needs.setup.outputs.environment == 'production' && format('arn:aws:iam::{0}:role/{1}', secrets.AWS_ACCOUNT_ID_PROD, secrets.AWS_ROLE_NAME_PROD) || format('arn:aws:iam::{0}:role/{1}', secrets.AWS_ACCOUNT_ID_STAGING, secrets.AWS_ROLE_NAME_STAGING) }}
          role-session-name: GitHubActions-Deploy
          aws-region: ${{ needs.setup.outputs.aws-region }}
          audience: sts.amazonaws.com

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: lambda-package-${{ needs.setup.outputs.environment }}

      - name: Deploy with CodeDeploy canary
        run: |
          # Use canary deployment script
          chmod +x scripts/deploy-lambda-canary.sh

          # Determine package file (signed or unsigned)
          PACKAGE_FILE="lambda-function.zip"
          if [[ -f "lambda-function-signed.zip" ]]; then
            PACKAGE_FILE="lambda-function-signed.zip"
          fi

          # Deploy using canary script
          ./scripts/deploy-lambda-canary.sh \
            --function "lambda-function-${{ needs.setup.outputs.environment }}" \
            --environment "${{ needs.setup.outputs.environment }}" \
            --package "$PACKAGE_FILE" \
            --config "CodeDeployDefault.Lambda10PercentEvery5Minutes" \
            --timeout 600 \
            --region "${{ needs.setup.outputs.aws-region }}"

      - name: Verify deployment success
        run: |
          # Check if deployment report exists and verify success
          if [[ -f "deployment-report.json" ]]; then
            echo "Deployment report generated:"
            cat deployment-report.json

            # Extract deployment status
            DEPLOYMENT_STATUS=$(jq -r '.deploymentStatus' deployment-report.json)

            if [[ "$DEPLOYMENT_STATUS" != "Succeeded" ]]; then
              echo "Deployment did not succeed: $DEPLOYMENT_STATUS"
              exit 1
            fi

            echo "Deployment verified as successful"
          else
            echo "Warning: Deployment report not found"
          fi

      - name: Post-deployment health check
        run: |
          echo "Running post-deployment health checks..."
          
          # Wait for deployment to stabilize
          sleep 30
          
          # Test Lambda function invocation
          FUNCTION_NAME="lambda-function-${{ needs.setup.outputs.environment }}"
          
          echo "Testing Lambda function: $FUNCTION_NAME"
          
          # Invoke function with test payload
          TEST_RESULT=$(aws lambda invoke \
            --function-name "$FUNCTION_NAME" \
            --payload '{"test": true, "source": "cicd-health-check"}' \
            --region "${{ needs.setup.outputs.aws-region }}" \
            response.json 2>&1 || echo "INVOKE_FAILED")
          
          if [[ "$TEST_RESULT" == *"INVOKE_FAILED"* ]]; then
            echo "❌ Lambda function invocation failed"
            echo "Error: $TEST_RESULT"
            exit 1
          fi
          
          # Check response
          if [[ -f "response.json" ]]; then
            echo "✅ Lambda function invocation successful"
            echo "Response:"
            cat response.json
            
            # Check for errors in response
            if grep -q "errorMessage\|errorType" response.json; then
              echo "❌ Lambda function returned an error"
              cat response.json
              exit 1
            fi
          else
            echo "❌ No response file generated"
            exit 1
          fi
          
          echo "✅ Post-deployment health check passed"

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-artifacts-${{ needs.setup.outputs.environment }}
          path: |
            deployment-report.json
            validation-report.json
            signing-report.json
            package-manifest.json

  # Automatic rollback job (triggers on deployment failure or manual trigger)
  rollback:
    runs-on: ubuntu-latest
    needs: 
      - deploy
    if: always() && (needs.deploy.result == 'failure' || github.event_name == 'workflow_dispatch')
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}-rollback
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "aws-region=us-east-1" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "aws-region=us-east-1" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.env.outputs.environment == 'production' && format('arn:aws:iam::{0}:role/{1}', secrets.AWS_ACCOUNT_ID_PROD, secrets.AWS_ROLE_NAME_PROD) || format('arn:aws:iam::{0}:role/{1}', secrets.AWS_ACCOUNT_ID_STAGING, secrets.AWS_ROLE_NAME_STAGING) }}
          role-session-name: GitHubActions-Rollback
          aws-region: ${{ steps.env.outputs.aws-region }}
          audience: sts.amazonaws.com

      - name: Rollback to previous version
        run: |
          echo "🔄 Starting automatic rollback process..."
          echo "Deployment failure detected - initiating emergency rollback"
          
          # Log rollback trigger reason
          if [[ "${{ needs.deploy.result }}" == "failure" ]]; then
            echo "Rollback triggered by: Deployment job failure"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Rollback triggered by: Manual workflow dispatch"
          fi
          
          # Use rollback script for emergency rollback
          chmod +x scripts/rollback-lambda-deployment.sh

          ./scripts/rollback-lambda-deployment.sh \
            --function "lambda-function-${{ steps.env.outputs.environment }}" \
            --environment "${{ steps.env.outputs.environment }}" \
            --mode "emergency" \
            --region "${{ steps.env.outputs.aws-region }}" \
            --force
          
          echo "🔄 Rollback process completed"

      - name: Verify rollback success
        run: |
          echo "🔍 Verifying rollback was successful..."
          
          # Test the rolled-back function
          FUNCTION_NAME="lambda-function-${{ steps.env.outputs.environment }}"
          
          # Wait for rollback to stabilize
          sleep 30
          
          # Test function invocation after rollback
          TEST_RESULT=$(aws lambda invoke \
            --function-name "$FUNCTION_NAME" \
            --payload '{"test": true, "source": "rollback-verification"}' \
            --region "${{ steps.env.outputs.aws-region }}" \
            rollback-response.json 2>&1 || echo "ROLLBACK_TEST_FAILED")
          
          if [[ "$TEST_RESULT" == *"ROLLBACK_TEST_FAILED"* ]]; then
            echo "❌ Rollback verification failed - function still not working"
            echo "Error: $TEST_RESULT"
            exit 1
          fi
          
          if [[ -f "rollback-response.json" ]]; then
            echo "✅ Rollback verification successful"
            echo "Function response after rollback:"
            cat rollback-response.json
          fi
          
          echo "✅ Rollback completed and verified successfully"

      - name: Notify rollback completion
        if: always()
        run: |
          echo "📢 Rollback notification"
          echo "Environment: ${{ steps.env.outputs.environment }}"
          echo "Function: lambda-function-${{ steps.env.outputs.environment }}"
          echo "Rollback Status: ${{ job.status }}"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref }}"
          
          # Create rollback report
          cat > rollback-report.json << EOF
          {
            "rollbackId": "${{ github.run_id }}-rollback",
            "environment": "${{ steps.env.outputs.environment }}",
            "functionName": "lambda-function-${{ steps.env.outputs.environment }}",
            "rollbackStatus": "${{ job.status }}",
            "triggeredBy": "${{ github.event_name }}",
            "originalCommit": "${{ github.sha }}",
            "branch": "${{ github.ref }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "deploymentFailureReason": "${{ needs.deploy.result }}"
          }
          EOF
          
          echo "Rollback report generated:"
          cat rollback-report.json

      - name: Upload rollback artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rollback-artifacts-${{ steps.env.outputs.environment }}
          path: |
            rollback-response.json
            rollback-report.json

      - name: Upload rollback artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rollback-artifacts-${{ needs.setup.outputs.environment }}
          path: |
            rollback-report.json