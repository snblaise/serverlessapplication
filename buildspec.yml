version: 0.2

# AWS CodeBuild buildspec for Lambda function CI/CD
# This file defines the build process for compiling, testing, and deploying the Lambda function

env:
  variables:
    # Build configuration
    NODE_VERSION: "18"
    AWS_DEFAULT_REGION: "us-east-1"
    PACKAGE_NAME: "lambda-function.zip"
    
  parameter-store:
    # Environment-specific parameters from AWS Systems Manager Parameter Store
    # These should be configured in your AWS account
    # ENVIRONMENT: "/lambda/build/environment"
    # LOG_LEVEL: "/lambda/build/log-level"
    
  # Secrets from AWS Secrets Manager (optional)
  # secrets-manager:
  #   SIGNING_KEY: "lambda/signing:key"

phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - echo "Installing build dependencies..."
      - npm --version
      - node --version
      
      # Install global tools if needed
      - npm install -g aws-cli-js
      
      # Verify AWS CLI
      - aws --version
      
      # Set environment based on branch or parameter
      - |
        if [ "$CODEBUILD_WEBHOOK_HEAD_REF" = "refs/heads/main" ]; then
          export ENVIRONMENT="production"
        elif [ "$CODEBUILD_WEBHOOK_HEAD_REF" = "refs/heads/develop" ]; then
          export ENVIRONMENT="staging"
        else
          export ENVIRONMENT="staging"
        fi
      - echo "Building for environment: $ENVIRONMENT"

  pre_build:
    commands:
      - echo "Pre-build phase started on `date`"
      
      # Install dependencies
      - echo "Installing Node.js dependencies..."
      - npm ci
      
      # Run security audit
      - echo "Running security audit..."
      - npm audit --audit-level=high || echo "Security audit completed with warnings"
      
      # Run linting
      - echo "Running code linting..."
      - npm run lint
      
      # Run tests with coverage
      - echo "Running tests with coverage..."
      - npm test
      
      # Validate test coverage meets thresholds
      - echo "Validating test coverage..."
      - |
        if [ -f "coverage/coverage-summary.json" ]; then
          echo "Coverage report found"
          cat coverage/coverage-summary.json
        fi

  build:
    commands:
      - echo "Build phase started on `date`"
      
      # Build the Lambda deployment package
      - echo "Building Lambda deployment package..."
      - chmod +x scripts/build-lambda-package.sh
      - ./scripts/build-lambda-package.sh
      
      # Validate the package
      - echo "Validating Lambda package..."
      - |
        if [ -f "$PACKAGE_NAME" ]; then
          echo "Package created successfully: $PACKAGE_NAME"
          ls -la $PACKAGE_NAME
          
          # Check package size (Lambda has a 50MB limit for direct upload)
          PACKAGE_SIZE=$(stat -c%s "$PACKAGE_NAME" 2>/dev/null || stat -f%z "$PACKAGE_NAME")
          echo "Package size: $PACKAGE_SIZE bytes"
          
          if [ $PACKAGE_SIZE -gt 52428800 ]; then
            echo "WARNING: Package size exceeds 50MB limit for direct upload"
            echo "Consider using S3 for deployment or optimizing dependencies"
          fi
        else
          echo "ERROR: Package not found!"
          exit 1
        fi
      
      # Run package validation script if it exists
      - |
        if [ -f "scripts/validate-lambda-package.sh" ]; then
          echo "Running package validation..."
          chmod +x scripts/validate-lambda-package.sh
          ./scripts/validate-lambda-package.sh -f $PACKAGE_NAME -m basic
        fi
      
      # Generate deployment metadata
      - echo "Generating deployment metadata..."
      - |
        cat > deployment-metadata.json << EOF
        {
          "buildId": "$CODEBUILD_BUILD_ID",
          "buildNumber": "$CODEBUILD_BUILD_NUMBER",
          "sourceVersion": "$CODEBUILD_SOURCE_VERSION",
          "environment": "$ENVIRONMENT",
          "buildTimestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "packageName": "$PACKAGE_NAME",
          "region": "$AWS_DEFAULT_REGION"
        }
        EOF
      
      # Copy CloudFormation template for deployment
      - echo "Preparing CloudFormation template..."
      - |
        if [ -f "templates/lambda-deployment-template.yaml" ]; then
          cp templates/lambda-deployment-template.yaml lambda-deployment-template.yaml
          echo "CloudFormation template prepared for deployment"
        else
          echo "WARNING: CloudFormation template not found"
        fi
      
      # Sign the package if signing is configured
      - |
        if [ -f "scripts/sign-lambda-package.sh" ]; then
          echo "Signing Lambda package..."
          chmod +x scripts/sign-lambda-package.sh
          
          # Set signing parameters based on environment
          SIGNING_PROFILE="lambda-$ENVIRONMENT"
          S3_BUCKET="lambda-artifacts-$ENVIRONMENT"
          
          ./scripts/sign-lambda-package.sh \
            --file $PACKAGE_NAME \
            --environment $ENVIRONMENT \
            --profile $SIGNING_PROFILE \
            --bucket $S3_BUCKET \
            --region $AWS_DEFAULT_REGION || echo "Package signing skipped or failed"
        fi

  post_build:
    commands:
      - echo "Post-build phase started on `date`"
      
      # Upload artifacts to S3 if configured
      - |
        if [ ! -z "${ARTIFACTS_BUCKET:-}" ]; then
          echo "Uploading artifacts to S3..."
          aws s3 cp $PACKAGE_NAME s3://$ARTIFACTS_BUCKET/builds/$CODEBUILD_BUILD_NUMBER/
          aws s3 cp package-manifest.json s3://$ARTIFACTS_BUCKET/builds/$CODEBUILD_BUILD_NUMBER/
          aws s3 cp deployment-metadata.json s3://$ARTIFACTS_BUCKET/builds/$CODEBUILD_BUILD_NUMBER/
          
          if [ -f "$PACKAGE_NAME.sha256" ]; then
            aws s3 cp $PACKAGE_NAME.sha256 s3://$ARTIFACTS_BUCKET/builds/$CODEBUILD_BUILD_NUMBER/
          fi
        fi
      
      # Deploy using AWS CLI or custom deployment script
      - |
        if [ "$CODEBUILD_WEBHOOK_HEAD_REF" = "refs/heads/main" ] || [ "$CODEBUILD_WEBHOOK_HEAD_REF" = "refs/heads/develop" ]; then
          echo "Deploying to $ENVIRONMENT environment..."
          
          # Use deployment script if available
          if [ -f "scripts/deploy-lambda-canary.sh" ]; then
            echo "Using canary deployment script..."
            chmod +x scripts/deploy-lambda-canary.sh
            
            FUNCTION_NAME="lambda-function-$ENVIRONMENT"
            DEPLOYMENT_CONFIG="CodeDeployDefault.Lambda10PercentEvery5Minutes"
            
            ./scripts/deploy-lambda-canary.sh \
              --function $FUNCTION_NAME \
              --environment $ENVIRONMENT \
              --package $PACKAGE_NAME \
              --config $DEPLOYMENT_CONFIG \
              --timeout 600 \
              --region $AWS_DEFAULT_REGION
          else
            echo "Using direct Lambda deployment..."
            aws lambda update-function-code \
              --function-name lambda-function-$ENVIRONMENT \
              --zip-file fileb://$PACKAGE_NAME \
              --region $AWS_DEFAULT_REGION
          fi
        else
          echo "Skipping deployment for feature branch"
        fi
      
      # Generate build report
      - echo "Generating build report..."
      - |
        cat > build-report.json << EOF
        {
          "buildStatus": "SUCCESS",
          "buildId": "$CODEBUILD_BUILD_ID",
          "environment": "$ENVIRONMENT",
          "packageSize": $(stat -c%s "$PACKAGE_NAME" 2>/dev/null || stat -f%z "$PACKAGE_NAME"),
          "testResults": {
            "passed": true,
            "coverageThreshold": "80%"
          },
          "securityScan": {
            "passed": true,
            "auditLevel": "high"
          },
          "deploymentTarget": "$ENVIRONMENT",
          "completedAt": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
        }
        EOF
      
      - echo "Build completed successfully!"

artifacts:
  files:
    # Primary deployment artifacts
    - lambda-function.zip
    - package-manifest.json
    - deployment-metadata.json
    - build-report.json
    - lambda-deployment-template.yaml
    
    # Checksums and signatures
    - lambda-function.zip.sha256
    - signing-report.json
    
    # Test and coverage reports
    - coverage/**/*
    - junit.xml
    
    # Security scan results
    - npm-audit-results.json
    - checkov-results.sarif
  
  name: lambda-build-artifacts-$(date +%Y-%m-%d-%H-%M-%S)
  
  # Optional: Upload to S3
  # base-directory: '.'
  # s3-prefix: builds/$CODEBUILD_BUILD_NUMBER

cache:
  paths:
    # Cache Node.js dependencies
    - node_modules/**/*
    - ~/.npm/**/*
    
    # Cache build tools
    - ~/.cache/**/*

reports:
  # Test reports for CodeBuild console
  test-reports:
    files:
      - junit.xml
    file-format: JUNITXML
    
  # Coverage reports
  coverage-reports:
    files:
      - coverage/cobertura-coverage.xml
    file-format: COBERTURAXML
    
  # Security scan reports
  security-reports:
    files:
      - checkov-results.sarif
    file-format: SARIF