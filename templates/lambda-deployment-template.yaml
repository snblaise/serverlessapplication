AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda function deployment template for CI/CD pipeline'

Parameters:
  Environment:
    Type: String
    Description: Environment name (staging, production)
    AllowedValues:
      - staging
      - production
    Default: staging

  FunctionName:
    Type: String
    Description: Name of the Lambda function
    Default: lambda-function

  PackageKey:
    Type: String
    Description: S3 key for the Lambda deployment package
    Default: builds/lambda-function.zip

  BucketName:
    Type: String
    Description: S3 bucket containing the Lambda deployment package

  Runtime:
    Type: String
    Description: Lambda runtime
    Default: nodejs18.x

  Handler:
    Type: String
    Description: Lambda function handler
    Default: index.handler

  Timeout:
    Type: Number
    Description: Function timeout in seconds
    Default: 30
    MinValue: 1
    MaxValue: 900

  MemorySize:
    Type: Number
    Description: Function memory size in MB
    Default: 128
    MinValue: 128
    MaxValue: 10240

  LogRetentionDays:
    Type: Number
    Description: CloudWatch log retention in days
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

Resources:
  # Lambda execution role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${FunctionName}-${Environment}-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${FunctionName}-${Environment}*'
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: lambda-production-ready
        - Key: ManagedBy
          Value: cloudformation

  # CloudWatch Log Group
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${FunctionName}-${Environment}'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: lambda-production-ready

  # Lambda function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${FunctionName}-${Environment}'
      Runtime: !Ref Runtime
      Handler: !Ref Handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref BucketName
        S3Key: !Ref PackageKey
      Timeout: !Ref Timeout
      MemorySize: !Ref MemorySize
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          LOG_LEVEL: !If [IsProduction, 'WARN', 'INFO']
          POWERTOOLS_SERVICE_NAME: lambda-production-readiness
          POWERTOOLS_METRICS_NAMESPACE: LambdaProductionReadiness
      TracingConfig:
        Mode: Active
      DeadLetterConfig:
        TargetArn: !GetAtt DeadLetterQueue.Arn
      ReservedConcurrencyLimit: !If [IsProduction, 100, 10]
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: lambda-production-ready
        - Key: ManagedBy
          Value: cloudformation
    DependsOn: LambdaLogGroup

  # Lambda alias for CodeDeploy
  LambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref LambdaFunction
      FunctionVersion: !GetAtt LambdaVersion.Version
      Name: live
      Description: !Sub 'Live alias for ${Environment} environment'

  # Lambda version
  LambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref LambdaFunction
      Description: !Sub 'Version deployed on ${Environment}'

  # Dead Letter Queue
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${FunctionName}-${Environment}-dlq'
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeoutSeconds: 60
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: lambda-production-ready

  # CodeDeploy Application
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub 'lambda-app-${Environment}'
      ComputePlatform: Lambda
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: lambda-production-ready

  # CodeDeploy Service Role
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeDeployServiceRole-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: lambda-production-ready

  # CodeDeploy Deployment Group
  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub 'lambda-deployment-group-${Environment}'
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentConfigName: !If [IsProduction, 'CodeDeployDefault.Lambda10PercentEvery5Minutes', 'CodeDeployDefault.LambdaAllAtOnce']
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
          - DEPLOYMENT_STOP_ON_ALARM
      AlarmConfiguration:
        Enabled: true
        Alarms:
          - Name: !Ref ErrorRateAlarm
          - Name: !Ref DurationAlarm
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 1
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
        GreenFleetProvisioningOption:
          Action: COPY_AUTO_SCALING_GROUP

  # CloudWatch Alarms
  ErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'lambda-error-rate-${Environment}'
      AlarmDescription: !Sub 'Error rate alarm for ${FunctionName}-${Environment}'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref LambdaFunction
      TreatMissingData: notBreaching

  DurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'lambda-duration-${Environment}'
      AlarmDescription: !Sub 'Duration alarm for ${FunctionName}-${Environment}'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10000  # 10 seconds
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref LambdaFunction
      TreatMissingData: notBreaching

  ThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'lambda-throttle-${Environment}'
      AlarmDescription: !Sub 'Throttle alarm for ${FunctionName}-${Environment}'
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref LambdaFunction
      TreatMissingData: notBreaching

Conditions:
  IsProduction: !Equals [!Ref Environment, 'production']

Outputs:
  FunctionName:
    Description: Name of the Lambda function
    Value: !Ref LambdaFunction
    Export:
      Name: !Sub '${AWS::StackName}-FunctionName'

  FunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-FunctionArn'

  FunctionVersion:
    Description: Version of the Lambda function
    Value: !Ref LambdaVersion
    Export:
      Name: !Sub '${AWS::StackName}-FunctionVersion'

  AliasArn:
    Description: ARN of the Lambda alias
    Value: !Ref LambdaAlias
    Export:
      Name: !Sub '${AWS::StackName}-AliasArn'

  CodeDeployApplication:
    Description: Name of the CodeDeploy application
    Value: !Ref CodeDeployApplication
    Export:
      Name: !Sub '${AWS::StackName}-CodeDeployApplication'

  DeadLetterQueueUrl:
    Description: URL of the Dead Letter Queue
    Value: !Ref DeadLetterQueue
    Export:
      Name: !Sub '${AWS::StackName}-DeadLetterQueueUrl'